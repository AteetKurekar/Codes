n=148 and k=3 so P=148148148
super_digit(P) = super_digit(148148148) 
               = super_digit(1+4+8+1+4+8+1+4+8)
               = super_digit(39)
               = super_digit(3+9)
               = super_digit(12)
               = super_digit(1+2)
               = super_digit(3)
               = 3
=======================================================================================================================================================
Solution:
package beginners;
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the superDigit function below.
    static long digitsum(long l){
        if(l>=0 && l<=9) {
            return l;
        }
        long sum=0;
        while(l!=0) {
            sum+=l%10;
            l/=10;
        }
        return digitsum(sum);
    }
    static long superDigit(String n, int k) {
        return digitsum(k*digitsum(Integer.valueOf(n)));
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        Scanner sc=new Scanner(System.in);
        System.out.println(superDigit("9675",3));
        scanner.close();
    }
}
This solution will have problem if number grows exponentially.Long also wont handle it for ex: 123456863146411234568631464112345686314641123456863146411234568631
==========================================================================================================================================               
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the superDigit function below.
    static int superDigit(String number, int k) {
        if(number.length()<=1)
            return Character.getNumericValue(number.charAt(0));
    
        long sum = 0;
        for (int i = 0; i < number.length(); i++){
            sum += Character.getNumericValue(number.charAt(i));
        }
        return superDigit(Long.toString(sum * k), 1);
        
            

    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        String n = nk[0];

        int k = Integer.parseInt(nk[1]);

        int result = superDigit(n, k);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
